from aiogram import types, Dispatcher
from config import ADMIN_ID, USER_ID
from keyboards import get_shop_keyboard
from models import (
    get_balance, add_balance, subtract_balance,
    get_items, add_item, remove_item
)

async def start_cmd(message: types.Message):
    if message.from_user.id == USER_ID:
        balance = get_balance(USER_ID)
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –ª—é–±–≤–∏ üíñ\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤ üíã", reply_markup=get_shop_keyboard())
    elif message.from_user.id == ADMIN_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –ù–∞–ø–∏—à–∏ /help –¥–ª—è –∫–æ–º–∞–Ω–¥.")

async def handle_order(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id != USER_ID:
        return await callback_query.answer("–¢–æ–ª—å–∫–æ –¥–ª—è —Ç–≤–æ–µ–π –¥–µ–≤—É—à–∫–∏ üòâ", show_alert=True)

    item_key = callback_query.data.replace("order_", "")
    items = get_items()
    item = items.get(item_key)
    if not item:
        return await callback_query.answer("–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç.")

    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    try:
        price = int(item.split("‚Äî")[-1].replace("–ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤", "").strip())
    except:
        return await callback_query.answer("–û—à–∏–±–∫–∞ —Å —Ü–µ–Ω–æ–π.")

    if subtract_balance(USER_ID, price):
        await callback_query.answer("–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω üíå")
        await callback_query.message.answer(f"–¢—ã –∑–∞–∫–∞–∑–∞–ª–∞: {item}")
        await callback_query.bot.send_message(ADMIN_ID, f"üíå –î–µ–≤—É—à–∫–∞ –∑–∞–∫–∞–∑–∞–ª–∞: {item}")
    else:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤ üò¢", show_alert=True)

# ---------------------
# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
# ---------------------

async def help_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("/add_item id –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
                         "/remove_item id ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
                         "/add_balance amount ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∏\n"
                         "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –¥–µ–≤—É—à–∫–∏")

async def add_item_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        _, item_id, *desc = message.text.split()
        description = " ".join(desc)
        add_item(item_id, description)
        await message.answer(f"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {description}")
    except:
        await message.answer("–û—à–∏–±–∫–∞. –ü—Ä–∏–º–µ—Ä: /add_item cinema üé¨ –°—Ö–æ–¥–∏—Ç—å –≤ –∫–∏–Ω–æ ‚Äî 10 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤")

async def remove_item_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        _, item_id = message.text.split()
        if remove_item(item_id):
            await message.answer(f"–£–¥–∞–ª–µ–Ω–æ: {item_id}")
        else:
            await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except:
        await message.answer("–ü—Ä–∏–º–µ—Ä: /remove_item cinema")

async def add_balance_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        _, amount = message.text.split()
        add_balance(USER_ID, int(amount))
        await message.answer(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤ üíã")
    except:
        await message.answer("–ü—Ä–∏–º–µ—Ä: /add_balance 10")

async def balance_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    bal = get_balance(USER_ID)
    await message.answer(f"–ë–∞–ª–∞–Ω—Å –¥–µ–≤—É—à–∫–∏: {bal} –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤")

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_cmd, commands=['start'])
    dp.register_callback_query_handler(handle_order, lambda c: c.data.startswith("order_"))

    dp.register_message_handler(help_cmd, commands=["help"])
    dp.register_message_handler(add_item_cmd, commands=["add_item"])
    dp.register_message_handler(remove_item_cmd, commands=["remove_item"])
    dp.register_message_handler(add_balance_cmd, commands=["add_balance"])
    dp.register_message_handler(balance_cmd, commands=["balance"])