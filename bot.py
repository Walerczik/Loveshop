import os
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiohttp import web
from config import (
    TOKEN, ADMIN_ID, GIRL_ID, WEBHOOK_URL, WEBHOOK_PATH,
    db_path, load_db, save_db
)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

db = load_db()

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üå∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å"))
main_kb.add(KeyboardButton("üéÅ –ú–∞–≥–∞–∑–∏–Ω"))

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text.startswith("/–Ω–∞—á–∏—Å–ª–∏—Ç—å"))
async def handle_add_kisses(message: types.Message):
    try:
        _, user_id, amount = message.text.split()
        user_id = int(user_id)
        amount = int(amount)
        db["balances"].setdefault(str(user_id), 0)
        db["balances"][str(user_id)] += amount
        save_db(db)
        await message.answer(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} –ø–æ—Ü–µ–ª—É–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:\n/–Ω–∞—á–∏—Å–ª–∏—Ç—å <user_id> <amount>")

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text.startswith("/–¥–æ–±–∞–≤–∏—Ç—å_—Ç–æ–≤–∞—Ä"))
async def handle_add_product(message: types.Message):
    try:
        _, title, price = message.text.split(maxsplit=2)
        product_id = str(len(db["products"]) + 1)
        db["products"][product_id] = {"title": title, "price": int(price)}
        save_db(db)
        await message.answer(f"–¢–æ–≤–∞—Ä '{title}' –¥–æ–±–∞–≤–ª–µ–Ω –∑–∞ {price} –ø–æ—Ü–µ–ª—É–µ–≤.")
    except Exception:
        await message.answer("–§–æ—Ä–º–∞—Ç: /–¥–æ–±–∞–≤–∏—Ç—å_—Ç–æ–≤–∞—Ä <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞>")

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    if message.from_user.id == GIRL_ID:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ—Ü–µ–ª—É–µ–≤ üíã", reply_markup=main_kb)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –¢—ã –∞–¥–º–∏–Ω üòé")

# –ë–∞–ª–∞–Ω—Å
@dp.message_handler(lambda m: m.text == "üå∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å" and m.from_user.id == GIRL_ID)
async def handle_balance(message: types.Message):
    balance = db["balances"].get(str(message.from_user.id), 0)
    await message.answer(f"–£ —Ç–µ–±—è {balance} –ø–æ—Ü–µ–ª—É–µ–≤ üíã")

# –ú–∞–≥–∞–∑–∏–Ω
@dp.message_handler(lambda m: m.text == "üéÅ –ú–∞–≥–∞–∑–∏–Ω" and m.from_user.id == GIRL_ID)
async def handle_shop(message: types.Message):
    text = "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å:\n\n"
    for pid, product in db["products"].items():
        text += f"{pid}. {product['title']} ‚Äî {product['price']} –ø–æ—Ü–µ–ª—É–µ–≤\n"
    text += "\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å."
    await message.answer(text)

@dp.message_handler(lambda m: m.text.isdigit() and m.from_user.id == GIRL_ID)
async def handle_purchase(message: types.Message):
    pid = message.text.strip()
    user_id = str(message.from_user.id)
    if pid in db["products"]:
        product = db["products"][pid]
        price = product["price"]
        balance = db["balances"].get(user_id, 0)
        if balance >= price:
            db["balances"][user_id] -= price
            save_db(db)
            await message.answer(f"–¢—ã –∑–∞–∫–∞–∑–∞–ª–∞: {product['title']} üíå")
            await bot.send_message(ADMIN_ID, f"–ó–∞–∫–∞–∑: {product['title']} –æ—Ç –¥–µ–≤—É—à–∫–∏!")
        else:
            await message.answer("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ—Ü–µ–ª—É–µ–≤ üò¢")
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç.")

# –í–µ–±—Ö—É–∫
from aiogram.utils.executor import start_webhook

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 10000))  # Render —Å–∞–º –∑–∞–¥–∞—ë—Ç –ø–æ—Ä—Ç

async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(app):
    await bot.delete_webhook()

# ‚ö†Ô∏è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π webhook handler
async def webhook_handler(request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.process_update(update)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
    return web.Response()

app = web.Application()
app.router.add_post(WEBHOOK_PATH, webhook_handler)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)